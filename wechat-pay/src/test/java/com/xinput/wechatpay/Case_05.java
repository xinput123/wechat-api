package com.xinput.wechatpay;import com.xinput.bleach.util.BuilderUtils;import com.xinput.bleach.util.JsonUtils;import com.xinput.bleach.util.Logs;import com.xinput.bleach.util.ObjectId;import com.xinput.wechatpay.config.WechatConfig;import com.xinput.wechatpay.exception.WechatPayException;import com.xinput.wechatpay.request.OrderQueryRequest;import com.xinput.wechatpay.request.UnifiedOrderRequest;import com.xinput.wechatpay.response.OrderQueryResponse;import com.xinput.wechatpay.response.UnifiedOrderResponse;import com.xinput.wechatpay.result.OrderSignature;import org.junit.jupiter.api.Test;import org.slf4j.Logger;/** * 用例5【扫码-异常】订单金额3.32元，用户支付成功，微信支付重复通知商户 * 【必选】支付异常用例集 * <p> * 用例名:【扫码-异常】订单金额3.32元，用户支付成功，同一笔单微信重复通知商户 * 用例说明: 验证微信支付重复通知的情况下，商户侧是否正确处理异常 * <p> * 测试步骤 * 1、用客户端扫码(选择商品下单)，调起微信支付交易确认页；(调下单api: https://api.mch.weixin.qq.com/sandboxnew/pay/unifiedorder) * 2、等待5秒，用户完成支付； * 3、调用查单api，与商户自有订单的关键信息进行核对。 * * @author <a href="mailto:xinput.xx@gmail.com">xinput</a> * @date 2020-09-29 17:45 */public class Case_05 {    private static final Logger logger = Logs.get();    private static final String transaction_id = "4854135429320200929184930307355";    private static final String out_trade_no = "5f7310e06b5adf9b35c6c73a";    @Test    public void unifiedOrder() throws WechatPayException {        UnifiedOrderRequest request = BuilderUtils.of(UnifiedOrderRequest::new)                // 商品名称                .with(UnifiedOrderRequest::setBody, "嘉云升-阿米洛机械键盘332")                // 获取客户端的ip地址                .with(UnifiedOrderRequest::setSpbill_create_ip, "192.168.10.13")                // 商户订单号,自己的订单ID                .with(UnifiedOrderRequest::setOut_trade_no, ObjectId.stringId())                // 支付金额                .with(UnifiedOrderRequest::setTotal_fee, 332)                // 支付成功后的回调地址                .with(UnifiedOrderRequest::setNotify_url, WechatConfig.getWechatNotifyUnifiedOrderUrl())                // 支付方式                .with(UnifiedOrderRequest::setTrade_type, "JSAPI")                .with(UnifiedOrderRequest::setDevice_info, "青轴机械键盘332")                .build();        UnifiedOrderResponse response = WechatPayApi.unifiedOrder(request);        logger.info("UnifiedOrderResponse : {}", JsonUtils.toJsonString(response, true));        // 再次签名        OrderSignature orderSignature = new OrderSignature(response);        logger.info("orderSignature : " + JsonUtils.toJsonString(orderSignature, true));    }    @Test    public void orderQuery() throws WechatPayException {        OrderQueryRequest request = new OrderQueryRequest();        // 参数二选一        request.setTransaction_id(transaction_id);        request.setOut_trade_no(out_trade_no);        OrderQueryResponse response = WechatPayApi.queryOrder(request);        logger.info(JsonUtils.toJsonString(response, true));    }    @Test    public void orderQuery01() {        try {            OrderQueryResponse response = WechatPayApi.queryOrderByTransactionId(transaction_id);            logger.info(JsonUtils.toJsonString(response, true));        } catch (Exception e) {            e.printStackTrace();        }    }    @Test    public void orderQuery02() {        try {            OrderQueryResponse response = WechatPayApi.queryOrderByOutTradeNo(out_trade_no);            logger.info(JsonUtils.toJsonString(response, true));        } catch (Exception e) {            e.printStackTrace();        }    }}