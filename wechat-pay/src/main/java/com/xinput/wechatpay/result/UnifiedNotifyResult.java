package com.xinput.wechatpay.result;import com.thoughtworks.xstream.annotations.XStreamAlias;import com.xinput.wechatpay.enums.BankEnum;import com.xinput.wechatpay.exception.WechatPayException;import com.xinput.wechatpay.request.BaseWeChatPayRequest;import java.util.List;/** * @author <a href="mailto:xinput.xx@gmail.com">xinput</a> * @date 2020-10-10 18:52 */@XStreamAlias("xml")public class UnifiedNotifyResult extends BaseWeChatPayRequest {    // 以下字段在return_code为SUCCESS的时候有返回    @XStreamAlias("return_code")    private String return_code;    @XStreamAlias("return_msg")    private String return_msg;    /**     * 设备号     * 必填: 否     * 类型: String(32)     * 示例值: 013467007045764     * 描述: 自定义参数，可以为终端设备号(门店号或收银设备ID)，PC网页或公众号内支付可以传"WEB"     */    @XStreamAlias("device_info")    private String device_info;    /**     * 业务结果     * 必填: 是     * 类型: String(16)     * 示例值: SUCCESS     * 描述: SUCCESS/FAIL     */    @XStreamAlias("result_code")    private String result_code;    /**     * 错误代码     * 必填: 否     * 类型: String(32)     * 示例值: SYSTEMERROR     * 描述:     */    @XStreamAlias("err_code")    private String err_code;    /**     * 错误代码描述     * 必填: 否     * 类型: String(128)     * 示例值: 系统错误     * 描述: 错误信息描述     */    @XStreamAlias("err_code_des")    private String err_code_des;    /**     * 用户标识     * 必填: 是     * 类型: String(128)     * 示例值: oUpF8uMuAJO_M2pxb1Q9zNjWeS6o     * 描述: trade_type=JSAPI，此参数必传，用户在商户appid下的唯一标识     */    @XStreamAlias("openid")    private String openid;    /**     * 是否关注公众账号     * 必填: 是     * 类型: String(1)     * 示例值: Y     * 描述: 用户是否关注公众账号，仅在公众账号类型支付有效，取值范围：Y或N;Y-关注;N-未关注     */    @XStreamAlias("is_subscribe")    private String is_subscribe;    /**     * 交易类型     * 必填: 是     * 类型: String(16)     * 示例值: MICROPAY     * 描述: MICROPAY 付款码支付     */    @XStreamAlias("trade_type")    private String trade_type;    /**     * 付款银行     * 必填: 否     * 类型: String(16)     * 示例值: CMC     * 描述: 银行类型，采用字符串类型的银行标识     * {@link BankEnum}     */    @XStreamAlias("bank_type")    private String bank_type;    /**     * 标价金额     * 必填: 是     * 类型: Integer     * 示例值: 88     * 描述: 订单总金额，单位为分     */    @XStreamAlias("total_fee")    private Integer total_fee;    /**     * 应结订单金额     * 必填: 否     * 类型: Integer     * 示例值: 100     * 描述: 去掉非充值代金券金额后的订单总金额，应结订单金额=订单金额-非充值代金券金额，应结订单金额<=订单金额。     */    @XStreamAlias("settlement_total_fee")    private Integer settlement_total_fee;    /**     * 标价币种     * 必填: 否     * 类型: String(8)     * 示例值: CNY     * 描述: 符合ISO 4217标准的三位字母代码，默认人民币：CNY     */    @XStreamAlias("fee_type")    private String fee_type;    /**     * 现金支付金额     * 必填: 是     * 类型: Integer     * 示例值: 100     * 描述: 现金支付金额订单现金支付金额     */    @XStreamAlias("cash_fee")    private Integer cash_fee;    /**     * 现金支付币种     * 必填: 否     * 类型: String(16)     * 示例值: CNY     * 描述: 货币类型，符合ISO 4217标准的三位字母代码，默认人民币：CNY     */    @XStreamAlias("cash_fee_type")    private String cash_fee_type;    /**     * 代金券金额     * 必填: 否     * 类型: Integer     * 示例值: 100     * 描述: “代金券”金额<=订单金额，订单金额-“代金券”金额=现金支付金额     */    @XStreamAlias("coupon_fee")    private Integer coupon_fee;    /**     * 代金券使用数量     * 必填: 否     * 类型: Integer     * 示例值: 1     * 描述: 代金券使用数量     */    @XStreamAlias("coupon_count")    private Integer coupon_count;    /**     * 微信订单号     * 必填: 是     * 类型: String(32)     * 示例值: 1009660380201506130728806387     * 描述: 微信订单号查询的优先级是： refund_id > out_refund_no > transaction_id > out_trade_no     */    @XStreamAlias("transaction_id")    private String transaction_id;    /**     * 商户订单号     * 必填: 是     * 类型: String(32)     * 示例值: 1009660380201506130728806387     * 描述: 商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|*@ ，且在同一个商户号下唯一。     */    @XStreamAlias("out_trade_no")    private String out_trade_no;    /**     * 附加数据     * 必填: 否     * 类型: String(128)     * 示例值: 深圳分店     * 描述: 商家数据包，原样返回     */    @XStreamAlias("attach")    private String attach;    /**     * 附加数据     * 必填: 是     * 类型: String(14)     * 示例值: 深圳分店     * 描述: 支付完成时间，格式为yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。     */    @XStreamAlias("time_end")    private String time_end;    private List<UnifiedCoupon> unifiedCoupons;    public String getReturn_code() {        return return_code;    }    public void setReturn_code(String return_code) {        this.return_code = return_code;    }    public String getReturn_msg() {        return return_msg;    }    public void setReturn_msg(String return_msg) {        this.return_msg = return_msg;    }    public String getDevice_info() {        return device_info;    }    public void setDevice_info(String device_info) {        this.device_info = device_info;    }    public String getResult_code() {        return result_code;    }    public void setResult_code(String result_code) {        this.result_code = result_code;    }    public String getErr_code() {        return err_code;    }    public void setErr_code(String err_code) {        this.err_code = err_code;    }    public String getErr_code_des() {        return err_code_des;    }    public void setErr_code_des(String err_code_des) {        this.err_code_des = err_code_des;    }    public String getOpenid() {        return openid;    }    public void setOpenid(String openid) {        this.openid = openid;    }    public String getIs_subscribe() {        return is_subscribe;    }    public void setIs_subscribe(String is_subscribe) {        this.is_subscribe = is_subscribe;    }    public String getTrade_type() {        return trade_type;    }    public void setTrade_type(String trade_type) {        this.trade_type = trade_type;    }    public String getBank_type() {        return bank_type;    }    public void setBank_type(String bank_type) {        this.bank_type = bank_type;    }    public Integer getTotal_fee() {        return total_fee;    }    public void setTotal_fee(Integer total_fee) {        this.total_fee = total_fee;    }    public Integer getSettlement_total_fee() {        return settlement_total_fee;    }    public void setSettlement_total_fee(Integer settlement_total_fee) {        this.settlement_total_fee = settlement_total_fee;    }    public String getFee_type() {        return fee_type;    }    public void setFee_type(String fee_type) {        this.fee_type = fee_type;    }    public Integer getCash_fee() {        return cash_fee;    }    public void setCash_fee(Integer cash_fee) {        this.cash_fee = cash_fee;    }    public String getCash_fee_type() {        return cash_fee_type;    }    public void setCash_fee_type(String cash_fee_type) {        this.cash_fee_type = cash_fee_type;    }    public Integer getCoupon_fee() {        return coupon_fee;    }    public void setCoupon_fee(Integer coupon_fee) {        this.coupon_fee = coupon_fee;    }    public Integer getCoupon_count() {        return coupon_count;    }    public void setCoupon_count(Integer coupon_count) {        this.coupon_count = coupon_count;    }    public String getTransaction_id() {        return transaction_id;    }    public void setTransaction_id(String transaction_id) {        this.transaction_id = transaction_id;    }    public String getOut_trade_no() {        return out_trade_no;    }    public void setOut_trade_no(String out_trade_no) {        this.out_trade_no = out_trade_no;    }    public String getAttach() {        return attach;    }    public void setAttach(String attach) {        this.attach = attach;    }    public String getTime_end() {        return time_end;    }    public void setTime_end(String time_end) {        this.time_end = time_end;    }    public List<UnifiedCoupon> getUnifiedCoupons() {        return unifiedCoupons;    }    public void setUnifiedCoupons(List<UnifiedCoupon> unifiedCoupons) {        this.unifiedCoupons = unifiedCoupons;    }    @Override    public void checkConstraints() throws WechatPayException {    }}