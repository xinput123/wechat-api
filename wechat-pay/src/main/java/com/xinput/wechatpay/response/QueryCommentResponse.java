package com.xinput.wechatpay.response;import com.google.common.collect.Lists;import com.thoughtworks.xstream.annotations.XStreamAlias;import com.xinput.bleach.util.StringUtils;import com.xinput.bleach.util.XmlUtils;import com.xinput.wechatpay.consts.WechatConsts;import java.util.List;/** * @author <a href="mailto:xinput.xx@gmail.com">xinput</a> * @date 2020-09-27 13:58 */@XStreamAlias("xml")public class QueryCommentResponse extends BaseWeChatPayResponse {    private Integer lastOffset;    private List<OrderComment> comments;    public Integer getLastOffset() {        return lastOffset;    }    public void setLastOffset(Integer lastOffset) {        this.lastOffset = lastOffset;    }    public List<OrderComment> getComments() {        return comments;    }    public void setComments(List<OrderComment> comments) {        this.comments = comments;    }    public static QueryCommentResponse fromXml(String result) {        if (result.startsWith(WechatConsts.XML)) {            return XmlUtils.toBean(result, QueryCommentResponse.class);        }        String[] rows = result.split("\n");        List<OrderComment> orderComments = Lists.newArrayListWithCapacity(rows.length);        for (int i = 1; i < rows.length; i++) {            String[] commontInfo = rows[i].split(",`");            if (commontInfo == null || commontInfo.length != 4) {                continue;            }            OrderComment comment = new OrderComment();            comment.setCommentDateTime(commontInfo[0].replaceAll("`", StringUtils.EMPTY));            comment.setTransaction_id(commontInfo[1]);            comment.setStar(Integer.parseInt(commontInfo[2]));            comment.setComment(commontInfo[3]);            orderComments.add(comment);        }        QueryCommentResponse resp = new QueryCommentResponse();        resp.setReturn_code(WechatConsts.SUCCESS);        resp.setResult_code(WechatConsts.SUCCESS);        resp.setLastOffset(Integer.parseInt(rows[0].replaceAll("`", StringUtils.EMPTY)));        resp.setComments(orderComments);        return resp;    }    @Override    public boolean isSuccess() {        if (StringUtils.equalsIgnoreCase("SUCCESS", this.getReturn_code())                && StringUtils.equalsIgnoreCase("SUCCESS", this.getResult_code())) {            return true;        }        return false;    }}