package com.xinput.wechatpay.util;import com.xinput.bleach.util.SecureUtils;import com.xinput.wechatpay.exception.WechatPayException;import javax.crypto.Cipher;import javax.crypto.spec.SecretKeySpec;import java.security.Security;/** * AES */public class AESUtils {    /**     * 密钥算法     */    private static final String ALGORITHM = "AES";    /**     * 加解密算法/工作模式/填充方式     */    private static final String ALGORITHM_MODE_PADDING = "AES/ECB/PKCS7Padding";    static {        // Security.addProvider(new BouncyCastleProvider());        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());    }    /**     * AES加密     *     * @param data     * @return     * @throws Exception     */    public static String encryptData(String data, String key) throws Exception {        // 创建密码器        Cipher cipher = Cipher.getInstance(ALGORITHM_MODE_PADDING, "BC");        SecretKeySpec secretKeySpec = new SecretKeySpec(SecureUtils.MD5(key).getBytes(), ALGORITHM);        // 初始化        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);        return new String(BASE64Utils.encodeBase64(cipher.doFinal(data.getBytes())));    }    /**     * AES解密     *     * @param base64Data     * @return     * @throws Exception     */    public static String decryptData(String base64Data, String key) throws WechatPayException {        try {            Cipher cipher = Cipher.getInstance(ALGORITHM_MODE_PADDING, "BC");            SecretKeySpec secretKeySpec = new SecretKeySpec(SecureUtils.MD5(key).getBytes(), ALGORITHM);            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);            return new String(cipher.doFinal(BASE64Utils.decodeBase64(base64Data)));        } catch (Exception e) {            throw new WechatPayException("AES解密失败");        }    }}