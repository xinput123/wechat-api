package com.xinput.wechat;import com.xinput.bleach.util.BuilderUtils;import com.xinput.bleach.util.JsonUtils;import com.xinput.bleach.util.Logs;import com.xinput.bleach.util.ObjectId;import com.xinput.wechat.exception.WechatPayException;import com.xinput.wechat.request.RefundQueryRequest;import com.xinput.wechat.request.RefundRequest;import com.xinput.wechat.request.UnifiedOrderRequest;import com.xinput.wechat.response.OrderQueryResponse;import com.xinput.wechat.response.RefundQueryResponse;import com.xinput.wechat.response.RefundResponse;import com.xinput.wechat.response.UnifiedOrderResponse;import org.junit.jupiter.api.Test;import org.slf4j.Logger;/** * 退款 * <p> * 测试步骤 * （1）进行 5.02 元的订单支付； * （2）根据商户内部单号（out_trade_no），调查单 api 进行查询，与商户自有订单的关键信息进行核对； * （3）根据商户内部单号（out_trade_no），调用退款 api 进行退款； * （4）根据商户内部单号（out_trade_no），调用退款查询 api 查询退款结果。 */public class Case_Refund {    private static final Logger logger = Logs.get();    private static final String out_trade_no = "5f76e01098ce561a87a5b1b1";    private static final String transaction_id = "4467384902020201002160913958710";    /**     * 统一下单     */    @Test    public void unifiedOrder() throws WechatPayException {        UnifiedOrderRequest request = BuilderUtils.of(UnifiedOrderRequest::new)                // 商品名称                .with(UnifiedOrderRequest::setBody, "嘉云升-502")                // 获取客户端的ip地址                .with(UnifiedOrderRequest::setSpbill_create_ip, "192.168.10.13")                // 商户订单号,自己的订单ID                .with(UnifiedOrderRequest::setOut_trade_no, ObjectId.stringId())                // 支付金额                .with(UnifiedOrderRequest::setTotal_fee, 502)                // 支付方式                .with(UnifiedOrderRequest::setTrade_type, "JSAPI")                .with(UnifiedOrderRequest::setDevice_info, "测试退款")                .build();        UnifiedOrderResponse response = WechatPayApi.unifiedOrder(request);        logger.info("UnifiedOrderResponse : {}", JsonUtils.toJsonString(response, true));    }    @Test    public void orderQuery() {        try {            OrderQueryResponse response = WechatPayApi.queryOrderByOutTradeNo(out_trade_no);            logger.info("查询订单结果:{}", JsonUtils.toJsonString(response, true));        } catch (Exception e) {            e.printStackTrace();        }    }    @Test    public void refund() throws WechatPayException {        String refundNo = ObjectId.stringId();        RefundRequest refundRequest = new RefundRequest();        refundRequest.setTransaction_id(transaction_id);        refundRequest.setOut_refund_no(refundNo);        refundRequest.setTotal_fee(502);        refundRequest.setRefund_fee(100);        RefundResponse response = WechatPayApi.refund(refundRequest);        logger.info(JsonUtils.toJsonString(response, true));        System.out.println("refundNo : " + refundNo);    }    @Test    public void queryRefund() {        RefundQueryRequest request = BuilderUtils.of(RefundQueryRequest::new)                .with(RefundQueryRequest::setTransaction_id, transaction_id)//                .with(RefundQueryRequest::setOut_trade_no, out_trade_no)                .build();        logger.info("查询退款:{}.", JsonUtils.toJsonString(request));        try {            RefundQueryResponse response = WechatPayApi.refundQuery(request);            logger.info(JsonUtils.toJsonString(response, true));        } catch (Exception e) {            e.printStackTrace();        }    }    @Test    public void queryRefund2() {        RefundQueryRequest request = BuilderUtils.of(RefundQueryRequest::new)                .with(RefundQueryRequest::setTransaction_id, "4200000764202009188340047847")//                .with(RefundQueryRequest::setOut_trade_no, out_trade_no)//                .with(RefundQueryRequest::setOffset, 10)                .build();        logger.info("查询退款:{}.", JsonUtils.toJsonString(request));        try {            RefundQueryResponse response = WechatPayApi.refundQuery(request);            logger.info(JsonUtils.toJsonString(response, true));        } catch (Exception e) {            e.printStackTrace();        }    }}